*Single input Single output Neural Network*
-> The single value is input through the neural network and it interacts with the weight in and gives single predicted value.
Let's say this is a single neural networks to predict if the person is sad or happy. We can consider sad and happy to be a neumerical value,
we could say that the number above 10 means the person is happy or else the person is sad.

To interprete this simple example;

int happyORsad(input, weight)
{
    int prediction = input * weight;
    return prediction;
}

*Single input Multiple output Neural Network*
-> Multiple values can be sent through the input and it interacts with unique weights and gives multiple out puts.

To interprete this simple example;

void (input, weight, output)
{
    for(int i =0; i < length_of_weight; i++)
    {
        output[i] = input * weight[i];
    }
}

*Multiple input Single output Neural Network*
-> 

To interprete this simple example;
double weightedSum( double* input, double* weight, int LEN)
{
    double output;
    for(int i = 0; i < LEN; i++)
    {
        output += input[i] * weight[i];
    }
    return output;
}

double multipleInSingleOut(double*input, double* weight, int LEN)
{
    double prediction;
    prediction = weightedSum(input, weight, LEN);

    return prediction;
}

*Multiple input multiple output*
-> This is nothing but a sequence of multiple input single output neural network.

void matrixVectorMultiply(double* input,
                        int inputLEN,
                        double* output,
                        int outputLEN,
                        double weight[outputLEN][inputLEN])
{
    for(int i = 0; i < outputLEN; i++)
    {
        for(int j = 0; j <inputLEN; j++)
        {
            output[i] += input[j] * weight[i][j];
        }
    }
}

void multipleInputMultipleOutput(double* input,
                                int inputLEN,
                                double* output,
                                int outputLEN,
                                double weight[outputLEN][inputLEN])
{
    matrixVectorMultiply(input, inputLEN, output, outputLEN, weight);
}
