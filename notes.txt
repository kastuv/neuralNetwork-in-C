*Single input Single output Neural Network*
-> The single value is input through the neural network and it interacts with the weight in and gives single predicted value.
Let's say this is a single neural networks to predict if the person is sad or happy. We can consider sad and happy to be a neumerical value,
we could say that the number above 10 means the person is happy or else the person is sad.

To interprete this simple example;

int happyORsad(input, weight)
{
    int prediction = input * weight;
    return prediction;
}

*Single input Multiple output Neural Network*
-> Multiple values can be sent through the input and it interacts with unique weights and gives multiple out puts.

To interprete this simple example;

void (input, weight, output)
{
    for(int i =0; i < length_of_weight; i++)
    {
        output[i] = input * weight[i];
    }
}

*Multiple input Single output Neural Network*
-> 

To interprete this simple example;
double weightedSum( double* input, double* weight, int LEN)
{
    double output;
    for(int i = 0; i < LEN; i++)
    {
        output += input[i] * weight[i];
    }
    return output;
}

double multipleInSingleOut(double*input, double* weight, int LEN)
{
    double prediction;
    prediction = weightedSum(input, weight, LEN);

    return prediction;
}

*Multiple input multiple output*
-> This is nothing but a sequence of multiple input single output neural network.

void matrixVectorMultiply(double* input,
                        int inputLEN,
                        double* output,
                        int outputLEN,
                        double weight[outputLEN][inputLEN])
{
    for(int i = 0; i < outputLEN; i++)
    {
        for(int j = 0; j <inputLEN; j++)
        {
            output[i] += input[j] * weight[i][j];
        }
    }
}

void multipleInputMultipleOutput(double* input,
                                int inputLEN,
                                double* output,
                                int outputLEN,
                                double weight[outputLEN][inputLEN])
{
    matrixVectorMultiply(input, inputLEN, output, outputLEN, weight);
}

*Multiple input multiple output with HIDDEN LAYER*
-> The concept is similar to "multiple input and multiple out" neural network, but with some extra layers underneath. Here, there will be inputs
with specific weights, by doing vector multiplication between list of inputs and weights the resulted out will again act as a input to some other
specific weight and generating output.

void hiddenLayerNN(double* input,
                    int inputLEN,
                    int hiddenLEN,
                    double INhiddenweight[hiddenLEN][inputLEN],
                    int outputLEN,
                    double OUThiddenweight[outputLEN][hiddenLEN],
                    double* output)
{
    double hiddenOutput[hiddenLEN];
    matrixVectorMultiply(input, inputLEN, hiddenOutput, hiddenLEN, INhiddenweight);
    matrixVectorMultiply(hiddenOutput, hiddenLEN, output, outputLEN, OUThiddenweight);
}


*Error Calculation In the prediction*
-> By the defination error simply is the difference of predicted value by actual value.

double errorCalc(double input, double weight, double actualOutput)
{
    double error = (input * weight) - actualOutput;
    return powf(error, 2);
}
    // Here, in the above function we have power of 2(sq.) to the error, to keep it positive and distinct.

We are not going to use this fuction in the code, as we have already calculated the input*weight in the previous functions,
we are just going to substract the output with the actual/expected output value.

double lossFunction(double yhat, double y)
{
    return powf((yhat -  y), 2);
}                                                   // This is a function representing the above statement.
                                                    // yhat : output & y : actualOutput

*Tensor*
-> Simple way to understand Tensor can be by visualizing vector matrix, but with some differences.
Tensor with only one element is Scalar Tensor.
    a = {2};
Tensor with series of element as one dimension is called Vector tensor.
    a = {1, 2, 3, 6, 4};
Tensor with more more rows are called 3D Tensor, which can be expressed in a similar was as a Matrix.
a = {{1,2},{3,4}}           |1  2|
                            |3  4|
    Shape of the tensor is simply the dimension of data, similar to (rows)x(columns) in matrix to fix the size.
    shape(axes, ranks)

